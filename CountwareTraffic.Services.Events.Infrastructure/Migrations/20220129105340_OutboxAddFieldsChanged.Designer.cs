// <auto-generated />
using System;
using CountwareTraffic.Services.Events.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CountwareTraffic.Services.Events.Infrastructure.Migrations
{
    [DbContext(typeof(EventDbContext))]
    [Migration("20220129105340_OutboxAddFieldsChanged")]
    partial class OutboxAddFieldsChanged
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.11")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CountwareTraffic.Services.Events.Core.Device", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.ToTable("Devices", "events");
                });

            modelBuilder.Entity("CountwareTraffic.Services.Events.Core.DirectionType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("DirectionTypes", "events");
                });

            modelBuilder.Entity("CountwareTraffic.Services.Events.Core.Event", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("AuditIsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(2500)
                        .HasColumnType("nvarchar(2500)");

                    b.Property<Guid>("DeviceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EventDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("_directionTypeId")
                        .HasColumnType("int")
                        .HasColumnName("DirectionTypeId");

                    b.HasKey("Id");

                    b.HasIndex("DeviceId");

                    b.HasIndex("_directionTypeId");

                    b.ToTable("Events", "events");
                });

            modelBuilder.Entity("CountwareTraffic.Services.Events.Infrastructure.OutboxMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Data")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("EventRecordId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsTryFromQueue")
                        .HasColumnType("bit");

                    b.Property<string>("LastException")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("OccurredOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ProcessedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("OutboxMessages", "event.app");
                });

            modelBuilder.Entity("CountwareTraffic.Services.Events.Core.Event", b =>
                {
                    b.HasOne("CountwareTraffic.Services.Events.Core.Device", null)
                        .WithMany()
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CountwareTraffic.Services.Events.Core.DirectionType", "DirectionType")
                        .WithMany()
                        .HasForeignKey("_directionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DirectionType");
                });
#pragma warning restore 612, 618
        }
    }
}
